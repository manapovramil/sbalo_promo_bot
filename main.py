
# -*- coding: utf-8 -*-
"""
SBALO Promo Bot ‚Äî Webhook –≤–µ—Ä—Å–∏—è –¥–ª—è Render (–∫–Ω–æ–ø–∫–∏ + –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã)
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –ö–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É (ReplyKeyboard) –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
- –ü—Ä–æ–º–æ–∫–æ–¥ = 4 —Å–∏–º–≤–æ–ª–∞ (A‚ÄìZ, 0‚Äì9), –º–∏–Ω–∏–º—É–º 1 –±—É–∫–≤–∞
- –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –ª–æ–≥–∏–∫–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
"""

import os, random, string
from datetime import datetime
from typing import Dict, Set

import telebot
from flask import Flask, request

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
STAFF_IDS: Set[int] = set(int(x) for x in os.getenv("STAFF_IDS", "").split(",") if x.strip().isdigit())
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –≤–ª–∞–¥–µ–ª–µ—Ü/–∞–¥–º–∏–Ω –±–æ—Ç–∞
SUBSCRIPTION_MIN_DAYS = int(os.getenv("SUBSCRIPTION_MIN_DAYS", "0"))
SERVICE_ACCOUNT_JSON_ENV = os.getenv("SERVICE_ACCOUNT_JSON", "").strip()
DISCOUNT_LABEL = os.getenv("DISCOUNT_LABEL", "7%")

if not SERVICE_ACCOUNT_JSON_ENV:
    raise SystemExit("ENV SERVICE_ACCOUNT_JSON –ø—É—Å—Ç ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ credentials.json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
missing = [k for k, v in [("BOT_TOKEN", BOT_TOKEN),
                          ("CHANNEL_USERNAME", CHANNEL_USERNAME),
                          ("SPREADSHEET_ID", SPREADSHEET_ID)] if not v]
if missing:
    raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing))

# ---------- Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ----------
CREDENTIALS_PATH = "/tmp/credentials.json"
with open(CREDENTIALS_PATH, "w", encoding="utf-8") as f:
    f.write(SERVICE_ACCOUNT_JSON_ENV)

SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_PATH, SCOPES)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

HEADERS = ["UserID","Username","PromoCode","DateIssued","DateRedeemed","RedeemedBy","OrderID","Source","SubscribedSince","Discount"]
headers = sheet.row_values(1)
if not headers:
    sheet.append_row(HEADERS)
    headers = HEADERS[:]
else:
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–ø—Ä–∞–≤–∞, –Ω–µ –æ—á–∏—â–∞—è –¥–∞–Ω–Ω—ã–µ
    for h in HEADERS:
        if h not in headers:
            sheet.update_cell(1, len(headers) + 1, h)
            headers.append(h)

# ---------- Telegram ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –≤ –û–ó–£)
STATE: Dict[int, str] = {}           # user_id -> state flag
USER_SOURCE: Dict[int, str] = {}     # user_id -> source (deep-link)

# –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
BTN_SUBSCRIBE = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
BTN_CHECK_SUB = "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
BTN_GET_PROMO = "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
BTN_STAFF_VERIFY = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥"
BTN_ADMIN_ADD_STAFF = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"

def make_main_keyboard(user_id: int):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_GET_PROMO), telebot.types.KeyboardButton(BTN_CHECK_SUB))
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if not STAFF_IDS or (user_id in STAFF_IDS):
        kb.add(telebot.types.KeyboardButton(BTN_STAFF_VERIFY))
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if ADMIN_ID and user_id == ADMIN_ID:
        kb.add(telebot.types.KeyboardButton(BTN_ADMIN_ADD_STAFF))
    return kb

def inline_subscribe_keyboard():
    ikb = telebot.types.InlineKeyboardMarkup()
    ikb.add(telebot.types.InlineKeyboardButton(BTN_SUBSCRIBE, url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
    ikb.add(telebot.types.InlineKeyboardButton(BTN_CHECK_SUB, callback_data="check_sub"))
    return ikb

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def generate_short_code() -> str:
    # 4 —Å–∏–º–≤–æ–ª–∞ –∏–∑ A-Z + 0-9, –º–∏–Ω–∏–º—É–º 1 –±—É–∫–≤–∞
    alphabet = string.ascii_uppercase + string.digits
    while True:
        code = "".join(random.choices(alphabet, k=4))
        if any(ch.isalpha() for ch in code):
            return code

def get_row_by_user(user_id):
    for i, rec in enumerate(sheet.get_all_records(), start=2):
        if str(rec.get("UserID")) == str(user_id):
            return i, rec
    return None, None

def find_user_code(user_id):
    i, rec = get_row_by_user(user_id)
    if i and rec.get("PromoCode"):
        return i, rec["PromoCode"]
    return None, None

def append_row_dict(data: dict):
    headers = sheet.row_values(1)
    row = [""] * len(headers)
    for k, v in data.items():
        if k in headers:
            row[headers.index(k)] = str(v)
    sheet.append_row(row)

def ensure_subscribed_since(user_id):
    i, rec = get_row_by_user(user_id)
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    headers = sheet.row_values(1)
    if "SubscribedSince" not in headers:
        sheet.append_row(["SubscribedSince"])  # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –Ω–æ –≤—ã—à–µ —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ HEADERS
    if i and rec.get("SubscribedSince"):
        try:
            return datetime.fromisoformat(rec["SubscribedSince"])
        except:
            pass
    if i:
        col = sheet.row_values(1).index("SubscribedSince") + 1
        sheet.update_cell(i, col, now)
    else:
        # –≤—Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        append_row_dict({
            "UserID": str(user_id),
            "Source": "subscribe_check",
            "SubscribedSince": now
        })
    return datetime.fromisoformat(now)

def can_issue(user_id):
    if SUBSCRIPTION_MIN_DAYS <= 0:
        return True
    since = ensure_subscribed_since(user_id)
    return (datetime.now() - since).days >= SUBSCRIPTION_MIN_DAYS

def issue_code(user_id, username, source="subscribe"):
    _, existing = find_user_code(user_id)
    if existing:
        return existing, False
    code = generate_short_code()
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    append_row_dict({
        "UserID": str(user_id),
        "Username": username or "",
        "PromoCode": code,
        "DateIssued": now,
        "DateRedeemed": "",
        "RedeemedBy": "",
        # "OrderID": "",  # –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
        "Source": source,
        "SubscribedSince": "",
        "Discount": DISCOUNT_LABEL,
    })
    return code, True

def redeem_code(code, staff_username):
    for i, rec in enumerate(sheet.get_all_records(), start=2):
        if rec.get("PromoCode") == code:
            if rec.get("DateRedeemed"):
                return False, (
                    "‚ùå –ö–æ–¥ —É–∂–µ –ø–æ–≥–∞—à–µ–Ω —Ä–∞–Ω–µ–µ.\n"
                    f"–°–∫–∏–¥–∫–∞: {rec.get('Discount', '')}\n"
                    f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {rec.get('DateIssued', '')}\n"
                    f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {rec.get('DateRedeemed', '')}\n"
                    f"–ü–æ–≥–∞—Å–∏–ª: {rec.get('RedeemedBy', '')}\n"
                )
            now = datetime.now().isoformat(sep=" ", timespec="seconds")
            headers = sheet.row_values(1)
            idx = {h: headers.index(h) for h in headers if h in headers}
            sheet.update_cell(i, idx["DateRedeemed"] + 1, now)
            sheet.update_cell(i, idx["RedeemedBy"] + 1, staff_username or "Staff")
            discount = rec.get("Discount", DISCOUNT_LABEL)
            issued = rec.get("DateIssued", "")
            source = rec.get("Source", "")
            reply = (
                "‚úÖ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.\n\n"
                f"–ö–æ–¥: <b>{code}</b>\n"
                f"–°–∫–∏–¥–∫–∞: <b>{discount}</b>\n"
                f"–í—ã–¥–∞–Ω: {issued}\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: @{staff_username if staff_username else 'Staff'}"
            )
            return True, reply
    return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå"

def is_subscribed(user_id):
    try:
        m = bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return m.status in ("member", "administrator", "creator")
    except Exception:
        return False

WELCOME = ("–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –ø—Ä–æ–º–æ-–±–æ—Ç <b>SBALO</b>.

"
           "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel}
"
           "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –∏–ª–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥¬ª.")

# ---------- Handlers ----------
@bot.message_handler(commands=["start", "help"])
def start(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1 and parts[1].strip():
        USER_SOURCE[message.from_user.id] = parts[1].strip()[:32].lower()

    bot.send_message(
        message.chat.id,
        WELCOME.format(channel=CHANNEL_USERNAME),
        reply_markup=make_main_keyboard(message.from_user.id)
    )
    # —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º inline –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    bot.send_message(
        message.chat.id,
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=inline_subscribe_keyboard()
    )

@bot.callback_query_handler(func=lambda c: c.data == "check_sub")
def check_sub(cb):
    u = cb.from_user
    if not is_subscribed(u.id):
        bot.answer_callback_query(cb.id, "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        bot.send_message(cb.message.chat.id,
                         f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_USERNAME}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
                         reply_markup=inline_subscribe_keyboard())
        return

    if not can_issue(u.id):
        bot.answer_callback_query(cb.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å—Ç–∞–∂ –ø–æ–¥–ø–∏—Å–∫–∏.")
        bot.send_message(cb.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.")
        return

    src = USER_SOURCE.get(u.id, "subscribe")
    code, _ = issue_code(u.id, u.username, source=src)
    bot.answer_callback_query(cb.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –≤—ã–¥–∞–Ω!")
    bot.send_message(cb.message.chat.id,
                     f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {CHANNEL_USERNAME}! üéâ\n–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>",
                     parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == BTN_CHECK_SUB)
def handle_check_sub_button(message):
    # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É inline-–∫–Ω–æ–ø–∫–∏
    fake_cb = type("obj", (object,), {"from_user": message.from_user, "message": message, "id": "0"})
    check_sub(fake_cb)

@bot.message_handler(func=lambda m: m.text == BTN_GET_PROMO)
def handle_get_promo(message):
    u = message.from_user
    if not is_subscribed(u.id):
        bot.reply_to(
            message,
            f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_USERNAME}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=inline_subscribe_keyboard()
        )
        return
    if not can_issue(u.id):
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.")
        return
    src = USER_SOURCE.get(u.id, "promo_btn")
    code, _ = issue_code(u.id, u.username, source=src)
    bot.reply_to(message, f"–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b> üéÅ", parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == BTN_STAFF_VERIFY)
def handle_staff_verify(message):
    if STAFF_IDS and message.from_user.id not in STAFF_IDS:
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return
    STATE[message.from_user.id] = "await_code"
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø–æ–≥–∞—à–µ–Ω–∏—è (4 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
                 reply_markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                     telebot.types.KeyboardButton(BTN_CANCEL)
                 ))

@bot.message_handler(func=lambda m: m.text == BTN_ADMIN_ADD_STAFF)
def handle_admin_add_staff(message):
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    STATE[message.from_user.id] = "await_staff_id"
    bot.reply_to(message, "–ü—Ä–∏—à–ª–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ü–∏—Ñ—Ä–∞–º–∏) –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –õ–∏–±–æ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
                 reply_markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                     telebot.types.KeyboardButton(BTN_CANCEL)
                 ))

@bot.message_handler(func=lambda m: m.text == BTN_CANCEL)
def handle_cancel(message):
    STATE.pop(message.from_user.id, None)
    bot.reply_to(message, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=make_main_keyboard(message.from_user.id))

@bot.message_handler(content_types=["text"])
def catch_all_text(message):
    uid = message.from_user.id
    state = STATE.get(uid)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∞–¥–º–∏–Ω)
    if state == "await_staff_id":
        new_id = None
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ
        if hasattr(message, "forward_from") and message.forward_from:
            new_id = message.forward_from.id
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            txt = (message.text or "").strip()
            if txt.isdigit():
                new_id = int(txt)

        if not new_id:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        STAFF_IDS.add(new_id)
        # –æ–±–Ω–æ–≤–∏–º ENV-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä–æ–∫—É (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥–∞—Ö)
        os.environ["STAFF_IDS"] = ",".join(str(x) for x in sorted(STAFF_IDS))
        STATE.pop(uid, None)
        bot.reply_to(message, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {new_id} ‚úÖ", reply_markup=make_main_keyboard(uid))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞/–ø–æ–≥–∞—à–µ–Ω–∏–µ –∫–æ–¥–∞ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)
    if state == "await_code":
        code = (message.text or "").strip().upper()
        if len(code) != 4 or not all(ch in (string.ascii_uppercase + string.digits) for ch in code):
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 4 —Å–∏–º–≤–æ–ª–∞ A‚ÄìZ/0‚Äì9.")
            return
        ok, info = redeem_code(code, message.from_user.username or "Staff")
        STATE.pop(uid, None)
        bot.reply_to(message, info, parse_mode="HTML", reply_markup=make_main_keyboard(uid))
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if message.text and message.text.startswith("/"):
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–¥—Å–∫–∞–∂–µ–º –ø—Ä–æ –∫–Ω–æ–ø–∫–∏
        bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É üëá", reply_markup=make_main_keyboard(uid))
    else:
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá", reply_markup=make_main_keyboard(uid))

# ---------- FLASK (WEBHOOK) ----------
app = Flask(__name__)
BASE_URL = os.getenv("BASE_URL") or f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME','')}".rstrip("/")
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

@app.route("/", methods=["GET"])
def health():
    return "OK", 200

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook error:", e)
    return "OK", 200

if __name__ == "__main__":
    try:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL, allowed_updates=["message","callback_query"])
        print("Webhook set to:", WEBHOOK_URL)
    except Exception as e:
        print("Failed to set webhook:", e)

    port = int(os.getenv("PORT", "10000"))
    print("SBALO Promo Bot (Webhook) started on port", port)
    app.run(host="0.0.0.0", port=port)
