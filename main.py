# -*- coding: utf-8 -*-
"""
SBALO Promo Bot ‚Äî Webhook –≤–µ—Ä—Å–∏—è –¥–ª—è Render
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (WELCOME) –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (BRAND_ABOUT)
- Inline-–∫–Ω–æ–ø–∫–∞: ¬´üéÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥¬ª
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å/–≥–∞—Å–∏—Ç—å –∫–æ–¥—ã (—Å—á–∏—Ç–∞–µ—Ç—Å—è staff)
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ID —Ü–∏—Ñ—Ä–∞–º–∏, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç
- –û—Ç–∑—ã–≤—ã: —Ä–µ–π—Ç–∏–Ω–≥ + —Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ (–ª–∏—Å—Ç Feedback)
"""

import os, random, string
from datetime import datetime
from typing import Dict, Set, List

import telebot
from flask import Flask, request

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
STAFF_IDS: Set[int] = set(int(x) for x in os.getenv("STAFF_IDS", "").split(",") if x.strip().isdigit())
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
SUBSCRIPTION_MIN_DAYS = int(os.getenv("SUBSCRIPTION_MIN_DAYS", "0"))
SERVICE_ACCOUNT_JSON_ENV = os.getenv("SERVICE_ACCOUNT_JSON", "").strip()
DISCOUNT_LABEL = os.getenv("DISCOUNT_LABEL", "7%")

if not SERVICE_ACCOUNT_JSON_ENV:
    raise SystemExit("ENV SERVICE_ACCOUNT_JSON –ø—É—Å—Ç ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ credentials.json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
missing = [k for k, v in [("BOT_TOKEN", BOT_TOKEN),
                          ("CHANNEL_USERNAME", CHANNEL_USERNAME),
                          ("SPREADSHEET_ID", SPREADSHEET_ID)] if not v]
if missing:
    raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing))

# ---------- Google Sheets ----------
CREDENTIALS_PATH = "/tmp/credentials.json"
with open(CREDENTIALS_PATH, "w", encoding="utf-8") as f:
    f.write(SERVICE_ACCOUNT_JSON_ENV)

SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_PATH, SCOPES)
client = gspread.authorize(creds)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç (–ø—Ä–æ–º–æ–∫–æ–¥—ã/–ø–æ–¥–ø–∏—Å–∫–∞)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1
HEADERS = ["UserID","Username","PromoCode","DateIssued","DateRedeemed","RedeemedBy","OrderID","Source","SubscribedSince","Discount"]
headers = sheet.row_values(1)
if not headers:
    sheet.append_row(HEADERS)
    headers = HEADERS[:]
else:
    for h in HEADERS:
        if h not in headers:
            sheet.update_cell(1, len(headers) + 1, h)
            headers.append(h)

# –õ–∏—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
try:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).worksheet("Feedback")
except gspread.WorksheetNotFound:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).add_worksheet(title="Feedback", rows=2000, cols=6)
    feedback_ws.append_row(["UserID","Username","Rating","Text","Photos","Date"])

# ---------- Telegram ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
STATE: Dict[int, str] = {}              
USER_SOURCE: Dict[int, str] = {}        
FEEDBACK_DRAFT: Dict[int, Dict] = {}    

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
BTN_ABOUT = "‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ"
BTN_FEEDBACK = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
BTN_STAFF_VERIFY = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥"
BTN_ADMIN_ADD_STAFF = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BTN_SKIP_PHOTOS = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
BTN_SEND_FEEDBACK = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
RATING_BTNS = ["‚≠ê 1","‚≠ê 2","‚≠ê 3","‚≠ê 4","‚≠ê 5"]

# ---------- –ü—Ä–∞–≤–∞ ----------
def is_admin(uid: int) -> bool:
    return bool(ADMIN_ID) and uid == ADMIN_ID

def is_staff(uid: int) -> bool:
    return uid in STAFF_IDS or is_admin(uid)

def add_staff_id(new_id: int) -> None:
    STAFF_IDS.add(new_id)
    os.environ["STAFF_IDS"] = ",".join(str(x) for x in sorted(STAFF_IDS))

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def make_main_keyboard(user_id: int):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_ABOUT), telebot.types.KeyboardButton(BTN_FEEDBACK))
    if is_staff(user_id):  
        kb.add(telebot.types.KeyboardButton(BTN_STAFF_VERIFY))
    if is_admin(user_id):
        kb.add(telebot.types.KeyboardButton(BTN_ADMIN_ADD_STAFF))
    return kb

def rating_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    kb.add(*[telebot.types.KeyboardButton(x) for x in RATING_BTNS])
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def photos_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_SEND_FEEDBACK), telebot.types.KeyboardButton(BTN_SKIP_PHOTOS))
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def inline_subscribe_keyboard():
    ikb = telebot.types.InlineKeyboardMarkup()
    ikb.add(telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
    ikb.add(telebot.types.InlineKeyboardButton("üéÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="check_and_issue"))
    return ikb

# ---------- –¢–µ–∫—Å—Ç—ã ----------
WELCOME = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>SBALO</b> üë†‚ú®\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —É–∑–Ω–∞–µ—à—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –±—Ä–µ–Ω–¥–∞ –∏ —Å–º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º.\n\n"
    "–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –±—É–¥—å –±–ª–∏–∂–µ –∫ –º–∏—Ä—É SBALO."
)

BRAND_ABOUT = (
    "<b>SBALO</b> –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–≤—ã—Å—à–∞—è –º–µ—Ä–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è¬ª ‚Äî –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –º—ã —Ö–æ—Ç–∏–º –¥–∞—Ä–∏—Ç—å –∫–∞–∂–¥–æ–º—É.\n\n"
    "–ú—ã —Å–æ–∑–¥–∞—ë–º –æ–±—É–≤—å –Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞—Ö –≤ –°—Ç–∞–º–±—É–ª–µ –∏ –ì—É–∞–Ω—á–∂–æ—É, –≥–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º–∏—Ä–æ–≤—ã–µ fashion-–±—Ä–µ–Ω–¥—ã.\n\n"
    "–í –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–æ –æ—Å–æ–±–∞—è —á–∞—Å—Ç—å –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏–∑ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫–æ–∂–∏ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. "
    "–û–Ω–∞ –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º: —á–µ—Ä–µ–∑ 1‚Äì2 –¥–Ω—è –Ω–æ—Å–∫–∏ –æ–±—É–≤—å –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å—Ç–æ–ø—É –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ —É–¥–æ–±–Ω–æ–π, –∫–∞–∫ –ª—é–±–∏–º—ã–µ —Ç–∞–ø–æ—á–∫–∏.\n\n"
    "SBALO ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ —Ç–≤–æ–π –∫–æ–º—Ñ–æ—Ä—Ç –≤ –∫–∞–∂–¥–æ–º —à–∞–≥–µ."
)

# ---------- –ü—Ä–æ–º–æ/–ø–æ–¥–ø–∏—Å–∫–∞ ----------
def generate_short_code() -> str:
    alphabet = string.ascii_uppercase + string.digits
    while True:
        code = "".join(random.choices(alphabet, k=4))
        if any(ch.isalpha() for ch in code):
            return code

def append_row_dict(ws, header_list, data: dict):
    headers_now = ws.row_values(1)
    if not headers_now:
        ws.append_row(header_list)
        headers_now = header_list[:]
    row = [""] * len(headers_now)
    for k, v in data.items():
        if k in headers_now:
            row[headers_now.index(k)] = str(v)
    ws.append_row(row)

def get_row_by_user(user_id):
    for i, rec in enumerate(sheet.get_all_records(), start=2):
        if str(rec.get("UserID")) == str(user_id):
            return i, rec
    return None, None

def find_user_code(user_id):
    i, rec = get_row_by_user(user_id)
    if i and rec.get("PromoCode"):
        return i, rec["PromoCode"]
    return None, None

def ensure_subscribed_since(user_id):
    i, rec = get_row_by_user(user_id)
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    headers_now = sheet.row_values(1)
    if "SubscribedSince" not in headers_now:
        sheet.update_cell(1, len(headers_now) + 1, "SubscribedSince")
        headers_now = sheet.row_values(1)
    if i and rec.get("SubscribedSince"):
        try:
            return datetime.fromisoformat(rec["SubscribedSince"])
        except Exception:
            pass
    if i:
        col = sheet.row_values(1).index("SubscribedSince") + 1
        sheet.update_cell(i, col, now)
    else:
        append_row_dict(sheet, HEADERS, {
            "UserID": str(user_id),
            "Source": "subscribe_check",
            "SubscribedSince": now
        })
    return datetime.fromisoformat(now)

def can_issue(user_id):
    if SUBSCRIPTION_MIN_DAYS <= 0:
        return True
    since = ensure_subscribed_since(user_id)
    return (datetime.now() - since).days >= SUBSCRIPTION_MIN_DAYS

def issue_code(user_id, username, source="subscribe"):
    _, existing = find_user_code(user_id)
    if existing:
        return existing, False
    code = generate_short_code()
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    append_row_dict(sheet, HEADERS, {
        "UserID": str(user_id),
        "Username": username or "",
        "PromoCode": code,
        "DateIssued": now,
        "DateRedeemed": "",
        "RedeemedBy": "",
        "Source": source,
        "SubscribedSince": "",
        "Discount": DISCOUNT_LABEL,
    })
    return code, True

def redeem_code(code, staff_username):
    for i, rec in enumerate(sheet.get_all_records(), start=2):
        if rec.get("PromoCode") == code:
            if rec.get("DateRedeemed"):
                return False, "‚ùå –ö–æ–¥ —É–∂–µ –ø–æ–≥–∞—à–µ–Ω —Ä–∞–Ω–µ–µ."
            now = datetime.now().isoformat(sep=" ", timespec="seconds")
            headers_now = sheet.row_values(1)
            idx = {h: headers_now.index(h) for h in headers_now if h in headers_now}
            sheet.update_cell(i, idx["DateRedeemed"] + 1, now)
            sheet.update_cell(i, idx["RedeemedBy"] + 1, staff_username or "Staff")
            discount = rec.get("Discount", DISCOUNT_LABEL)
            reply = f"‚úÖ –ö–æ–¥ {code} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –°–∫–∏–¥–∫–∞: {discount}"
            return True, reply
    return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå"

def is_subscribed(user_id):
    try:
        m = bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return m.status in ("member", "administrator", "creator")
    except Exception:
        return False

def do_check_subscription(chat_id, user):
    if not is_subscribed(user.id):
        bot.send_message(chat_id, f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_USERNAME}, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=inline_subscribe_keyboard())
        return
    if not can_issue(user.id):
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.")
        return
    src = USER_SOURCE.get(user.id, "subscribe")
    code, _ = issue_code(user.id, user.username, source=src)
    bot.send_message(chat_id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {CHANNEL_USERNAME}! üéâ\n–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>", parse_mode="HTML")

# ---------- Handlers ----------
@bot.message_handler(commands=["start", "help"])
def start(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1 and parts[1].strip():
        USER_SOURCE[message.from_user.id] = parts[1].strip()[:32].lower()
    bot.send_message(message.chat.id, WELCOME, reply_markup=make_main_keyboard(message.from_user.id))
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø—Ä–æ–º–æ–∫–æ–¥? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=inline_subscribe_keyboard())

@bot.callback_query_handler(func=lambda c: c.data == "check_and_issue")
def cb_check_and_issue(cb):
    do_check_subscription(cb.message.chat.id, cb.from_user)
    try:
        bot.answer_callback_query(cb.id)
    except Exception:
        pass

# ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: –æ—Ç–∑—ã–≤—ã, staff, admin, webhook)
