# -*- coding: utf-8 -*-
"""
SBALO Promo Bot ‚Äî Webhook –≤–µ—Ä—Å–∏—è –¥–ª—è Render
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
- –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
- –û—Ç–∑—ã–≤—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ñ–æ—Ç–æ (—Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Google Sheets)
"""

import os, random, string
from datetime import datetime
from typing import Dict, Set, List

import telebot
from flask import Flask, request

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
STAFF_IDS: Set[int] = set(int(x) for x in os.getenv("STAFF_IDS", "").split(",") if x.strip().isdigit())
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
SUBSCRIPTION_MIN_DAYS = int(os.getenv("SUBSCRIPTION_MIN_DAYS", "0"))
SERVICE_ACCOUNT_JSON_ENV = os.getenv("SERVICE_ACCOUNT_JSON", "").strip()
DISCOUNT_LABEL = os.getenv("DISCOUNT_LABEL", "7%")

if not SERVICE_ACCOUNT_JSON_ENV:
    raise SystemExit("ENV SERVICE_ACCOUNT_JSON –ø—É—Å—Ç ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ credentials.json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
missing = [k for k, v in [("BOT_TOKEN", BOT_TOKEN),
                          ("CHANNEL_USERNAME", CHANNEL_USERNAME),
                          ("SPREADSHEET_ID", SPREADSHEET_ID)] if not v]
if missing:
    raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing))

# ---------- Google Sheets ----------
CREDENTIALS_PATH = "/tmp/credentials.json"
with open(CREDENTIALS_PATH, "w", encoding="utf-8") as f:
    f.write(SERVICE_ACCOUNT_JSON_ENV)

SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_PATH, SCOPES)
client = gspread.authorize(creds)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç (–ø—Ä–æ–º–æ–∫–æ–¥—ã/–ø–æ–¥–ø–∏—Å–∫–∞)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1
HEADERS = ["UserID","Username","PromoCode","DateIssued","DateRedeemed","RedeemedBy","OrderID","Source","SubscribedSince","Discount"]
headers = sheet.row_values(1)
if not headers:
    sheet.append_row(HEADERS)
    headers = HEADERS[:]
else:
    for h in HEADERS:
        if h not in headers:
            sheet.update_cell(1, len(headers) + 1, h)
            headers.append(h)

# –õ–∏—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
try:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).worksheet("Feedback")
except gspread.WorksheetNotFound:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).add_worksheet(title="Feedback", rows=2000, cols=6)
    feedback_ws.append_row(["UserID","Username","Rating","Text","Photos","Date"])

# ---------- Telegram ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE: Dict[int, str] = {}  
USER_SOURCE: Dict[int, str] = {}  

FEEDBACK_DRAFT: Dict[int, Dict] = {}  

# –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
BTN_ABOUT = "‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ"
BTN_FEEDBACK = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
BTN_STAFF_VERIFY = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥"
BTN_ADMIN_ADD_STAFF = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BTN_SKIP_PHOTOS = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
BTN_SEND_FEEDBACK = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"

RATING_BTNS = ["‚≠ê 1","‚≠ê 2","‚≠ê 3","‚≠ê 4","‚≠ê 5"]

def make_main_keyboard(user_id: int):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_ABOUT), telebot.types.KeyboardButton(BTN_FEEDBACK))
    if not STAFF_IDS or (user_id in STAFF_IDS):
        kb.add(telebot.types.KeyboardButton(BTN_STAFF_VERIFY))
    if ADMIN_ID and user_id == ADMIN_ID:
        kb.add(telebot.types.KeyboardButton(BTN_ADMIN_ADD_STAFF))
    return kb

def rating_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    kb.add(*[telebot.types.KeyboardButton(x) for x in RATING_BTNS])
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def photos_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_SEND_FEEDBACK), telebot.types.KeyboardButton(BTN_SKIP_PHOTOS))
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def inline_subscribe_keyboard():
    ikb = telebot.types.InlineKeyboardMarkup()
    ikb.add(telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
    ikb.add(telebot.types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
    return ikb

# ---------- –¢–µ–∫—Å—Ç—ã ----------
WELCOME = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>SBALO</b> üë†‚ú®\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —É–∑–Ω–∞–µ—à—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –±—Ä–µ–Ω–¥–∞ –∏ —Å–º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º.\n\n"
    "–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –±—É–¥—å –±–ª–∏–∂–µ –∫ –º–∏—Ä—É SBALO."
)

BRAND_ABOUT = (
    "<b>SBALO</b> –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–≤—ã—Å—à–∞—è –º–µ—Ä–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è¬ª ‚Äî –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –º—ã —Ö–æ—Ç–∏–º –¥–∞—Ä–∏—Ç—å –∫–∞–∂–¥–æ–º—É.\n\n"
    "–ú—ã —Å–æ–∑–¥–∞—ë–º –æ–±—É–≤—å –Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞—Ö –≤ –°—Ç–∞–º–±—É–ª–µ –∏ –ì—É–∞–Ω—á–∂–æ—É, –≥–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º–∏—Ä–æ–≤—ã–µ fashion-–±—Ä–µ–Ω–¥—ã.\n\n"
    "–í –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–æ –æ—Å–æ–±–∞—è —á–∞—Å—Ç—å –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏–∑ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫–æ–∂–∏ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. "
    "–û–Ω–∞ –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º: —á–µ—Ä–µ–∑ 1‚Äì2 –¥–Ω—è –Ω–æ—Å–∫–∏ –æ–±—É–≤—å –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å—Ç–æ–ø—É –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ —É–¥–æ–±–Ω–æ–π, –∫–∞–∫ –ª—é–±–∏–º—ã–µ —Ç–∞–ø–æ—á–∫–∏.\n\n"
    "SBALO ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ —Ç–≤–æ–π –∫–æ–º—Ñ–æ—Ä—Ç –≤ –∫–∞–∂–¥–æ–º —à–∞–≥–µ."
)

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def generate_short_code() -> str:
    alphabet = string.ascii_uppercase + string.digits
    while True:
        code = "".join(random.choices(alphabet, k=4))
        if any(ch.isalpha() for ch in code):
            return code

def append_row_dict(ws, header_list, data: dict):
    headers_now = ws.row_values(1)
    if not headers_now:
        ws.append_row(header_list)
        headers_now = header_list[:]
    row = [""] * len(headers_now)
    for k, v in data.items():
        if k in headers_now:
            row[headers_now.index(k)] = str(v)
    ws.append_row(row)

def is_subscribed(user_id):
    try:
        m = bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return m.status in ("member", "administrator", "creator")
    except Exception:
        return False

# ---------- Handlers ----------
@bot.message_handler(commands=["start", "help"])
def start(message):
    bot.send_message(
        message.chat.id,
        WELCOME,
        reply_markup=make_main_keyboard(message.from_user.id)
    )
    bot.send_message(
        message.chat.id,
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=inline_subscribe_keyboard()
    )

@bot.message_handler(func=lambda m: m.text == BTN_ABOUT)
def handle_about(message):
    bot.reply_to(message, BRAND_ABOUT, parse_mode="HTML")

# ---------- –û—Ç–∑—ã–≤—ã (—Ä–µ–π—Ç–∏–Ω–≥ + —Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ) ----------
@bot.message_handler(func=lambda m: m.text == BTN_FEEDBACK)
def handle_feedback_start(message):
    uid = message.from_user.id
    FEEDBACK_DRAFT[uid] = {"rating": None, "text": None, "photos": []}
    STATE[uid] = "await_feedback_rating"
    bot.reply_to(
        message,
        "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –ø–æ –ø—è—Ç–∏–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ (1 ‚Äì –ø–ª–æ—Ö–æ, 5 ‚Äì –æ—Ç–ª–∏—á–Ω–æ).",
        reply_markup=rating_keyboard()
    )

@bot.message_handler(func=lambda m: m.text in RATING_BTNS)
def handle_feedback_rating(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_feedback_rating":
        return
    rating = int((message.text or "").split()[-1])
    FEEDBACK_DRAFT[uid]["rating"] = rating
    STATE[uid] = "await_feedback_text"
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    bot.reply_to(
        message,
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=kb
    )

@bot.message_handler(content_types=["text"])
def handle_text_general(message):
    uid = message.from_user.id
    state = STATE.get(uid)

    if state == "await_feedback_text":
        text = (message.text or "").strip()
        FEEDBACK_DRAFT[uid]["text"] = text
        STATE[uid] = "await_feedback_photos"
        bot.reply_to(
            message,
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ. "
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –∏–ª–∏ ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª.",
            reply_markup=photos_keyboard()
        )
        return

    if state == "await_feedback_photos" and message.text in (BTN_SEND_FEEDBACK, BTN_SKIP_PHOTOS):
        draft = FEEDBACK_DRAFT.get(uid, {})
        feedback_ws.append_row([
            str(uid),
            message.from_user.username or "",
            str(draft.get("rating")),
            draft.get("text"),
            ",".join(draft.get("photos", [])),
            datetime.now().isoformat(sep=" ", timespec="seconds")
        ])
        STATE.pop(uid, None)
        FEEDBACK_DRAFT.pop(uid, None)
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ", reply_markup=make_main_keyboard(uid))
        return

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_feedback_photos":
        return
    file_id = message.photo[-1].file_id
    if len(FEEDBACK_DRAFT[uid]["photos"]) < 5:
        FEEDBACK_DRAFT[uid]["photos"].append(file_id)
        bot.reply_to(message, f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(FEEDBACK_DRAFT[uid]['photos'])}/5).", reply_markup=photos_keyboard())
    else:
        bot.reply_to(message, "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ.", reply_markup=photos_keyboard())

# ---------- FLASK (WEBHOOK) ----------
app = Flask(__name__)
BASE_URL = os.getenv("BASE_URL") or f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME','')}".rstrip("/")
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

@app.route("/", methods=["GET"])
def health():
    return "OK", 200

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook error:", e)
    return "OK", 200

if __name__ == "__main__":
    try:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL, allowed_updates=["message","callback_query"])
        print("Webhook set to:", WEBHOOK_URL)
    except Exception as e:
        print("Failed to set webhook:", e)

    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
