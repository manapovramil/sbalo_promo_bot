# -*- coding: utf-8 -*-
"""
SBALO Promo Bot ‚Äî Webhook –≤–µ—Ä—Å–∏—è –¥–ª—è Render (–∫–Ω–æ–ø–∫–∏ + –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã)
–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:
- –ù–∏–∂–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: ¬´‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ¬ª, ¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª
- –û—Ç–∑—ã–≤—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 1‚Äì5 –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ñ–æ—Ç–æ (1‚Äì5 —à—Ç—É–∫)
- –û—Ç–∑—ã–≤—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç Google Sheets: Feedback
- –°–æ—Ö—Ä–∞–Ω–∏–ª –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞/–∞–¥–º–∏–Ω–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
"""

import os, random, string
from datetime import datetime
from typing import Dict, Set, List

import telebot
from flask import Flask, request

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
STAFF_IDS: Set[int] = set(int(x) for x in os.getenv("STAFF_IDS", "").split(",") if x.strip().isdigit())
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
SUBSCRIPTION_MIN_DAYS = int(os.getenv("SUBSCRIPTION_MIN_DAYS", "0"))
SERVICE_ACCOUNT_JSON_ENV = os.getenv("SERVICE_ACCOUNT_JSON", "").strip()
DISCOUNT_LABEL = os.getenv("DISCOUNT_LABEL", "7%")

if not SERVICE_ACCOUNT_JSON_ENV:
    raise SystemExit("ENV SERVICE_ACCOUNT_JSON –ø—É—Å—Ç ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ credentials.json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
missing = [k for k, v in [("BOT_TOKEN", BOT_TOKEN),
                          ("CHANNEL_USERNAME", CHANNEL_USERNAME),
                          ("SPREADSHEET_ID", SPREADSHEET_ID)] if not v]
if missing:
    raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing))

# ---------- Google Sheets ----------
CREDENTIALS_PATH = "/tmp/credentials.json"
with open(CREDENTIALS_PATH, "w", encoding="utf-8") as f:
    f.write(SERVICE_ACCOUNT_JSON_ENV)

SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_PATH, SCOPES)
client = gspread.authorize(creds)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç (–ø—Ä–æ–º–æ–∫–æ–¥—ã/–ø–æ–¥–ø–∏—Å–∫–∞)
sheet = client.open_by_key(SPREADSHEET_ID).sheet1
HEADERS = ["UserID","Username","PromoCode","DateIssued","DateRedeemed","RedeemedBy","OrderID","Source","SubscribedSince","Discount"]
headers = sheet.row_values(1)
if not headers:
    sheet.append_row(HEADERS)
    headers = HEADERS[:]
else:
    for h in HEADERS:
        if h not in headers:
            sheet.update_cell(1, len(headers) + 1, h)
            headers.append(h)

# –õ–∏—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
try:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).worksheet("Feedback")
except gspread.WorksheetNotFound:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).add_worksheet(title="Feedback", rows=2000, cols=6)
    feedback_ws.append_row(["UserID","Username","Rating","Text","Photos","Date"])

# ---------- Telegram ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE: Dict[int, str] = {}  # user_id -> state flag
USER_SOURCE: Dict[int, str] = {}  # user_id -> source

# –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
FEEDBACK_DRAFT: Dict[int, Dict] = {}  # {uid: {"rating": int, "text": str, "photos": [file_id,...]}}

# –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
BTN_ABOUT = "‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ"
BTN_FEEDBACK = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
BTN_STAFF_VERIFY = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥"
BTN_ADMIN_ADD_STAFF = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BTN_SKIP_PHOTOS = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
BTN_SEND_FEEDBACK = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"

RATING_BTNS = ["‚≠ê 1","‚≠ê 2","‚≠ê 3","‚≠ê 4","‚≠ê 5"]

def make_main_keyboard(user_id: int):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_ABOUT), telebot.types.KeyboardButton(BTN_FEEDBACK))
    if not STAFF_IDS or (user_id in STAFF_IDS):
        kb.add(telebot.types.KeyboardButton(BTN_STAFF_VERIFY))
    if ADMIN_ID and user_id == ADMIN_ID:
        kb.add(telebot.types.KeyboardButton(BTN_ADMIN_ADD_STAFF))
    return kb

def rating_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    kb.add(*[telebot.types.KeyboardButton(x) for x in RATING_BTNS])
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def photos_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_SEND_FEEDBACK), telebot.types.KeyboardButton(BTN_SKIP_PHOTOS))
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def inline_subscribe_keyboard():
    ikb = telebot.types.InlineKeyboardMarkup()
    ikb.add(telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
    ikb.add(telebot.types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))
    return ikb

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def generate_short_code() -> str:
    alphabet = string.ascii_uppercase + string.digits
    while True:
        code = "".join(random.choices(alphabet, k=4))
        if any(ch.isalpha() for ch in code):
            return code

def append_row_dict(ws, header_list, data: dict):
    headers_now = ws.row_values(1)
    if not headers_now:
        ws.append_row(header_list)
        headers_now = header_list[:]
    row = [""] * len(headers_now)
    for k, v in data.items():
        if k in headers_now:
            row[headers_now.index(k)] = str(v)
    ws.append_row(row)

def get_row_by_user(user_id):
    for i, rec in enumerate(sheet.get_all_records(), start=2):
        if str(rec.get("UserID")) == str(user_id):
            return i, rec
    return None, None

def find_user_code(user_id):
    i, rec = get_row_by_user(user_id)
    if i and rec.get("PromoCode"):
        return i, rec["PromoCode"]
    return None, None

def ensure_subscribed_since(user_id):
    i, rec = get_row_by_user(user_id)
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    headers_now = sheet.row_values(1)
    if "SubscribedSince" not in headers_now:
        sheet.update_cell(1, len(headers_now) + 1, "SubscribedSince")
        headers_now = sheet.row_values(1)
    if i and rec.get("SubscribedSince"):
        try:
            return datetime.fromisoformat(rec["SubscribedSince"])
        except Exception:
            pass
    if i:
        col = sheet.row_values(1).index("SubscribedSince") + 1
        sheet.update_cell(i, col, now)
    else:
        append_row_dict(sheet, HEADERS, {
            "UserID": str(user_id),
            "Source": "subscribe_check",
            "SubscribedSince": now
        })
    return datetime.fromisoformat(now)

def can_issue(user_id):
    if SUBSCRIPTION_MIN_DAYS <= 0:
        return True
    since = ensure_subscribed_since(user_id)
    return (datetime.now() - since).days >= SUBSCRIPTION_MIN_DAYS

def issue_code(user_id, username, source="subscribe"):
    _, existing = find_user_code(user_id)
    if existing:
        return existing, False
    code = generate_short_code()
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    append_row_dict(sheet, HEADERS, {
        "UserID": str(user_id),
        "Username": username or "",
        "PromoCode": code,
        "DateIssued": now,
        "DateRedeemed": "",
        "RedeemedBy": "",
        "Source": source,
        "SubscribedSince": "",
        "Discount": DISCOUNT_LABEL,
    })
    return code, True

def redeem_code(code, staff_username):
    for i, rec in enumerate(sheet.get_all_records(), start=2):
        if rec.get("PromoCode") == code:
            if rec.get("DateRedeemed"):
                return False, (
                    "‚ùå –ö–æ–¥ —É–∂–µ –ø–æ–≥–∞—à–µ–Ω —Ä–∞–Ω–µ–µ.\n"
                    f"–°–∫–∏–¥–∫–∞: {rec.get('Discount', '')}\n"
                    f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {rec.get('DateIssued', '')}\n"
                    f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {rec.get('DateRedeemed', '')}\n"
                    f"–ü–æ–≥–∞—Å–∏–ª: {rec.get('RedeemedBy', '')}\n"
                )
            now = datetime.now().isoformat(sep=" ", timespec="seconds")
            headers_now = sheet.row_values(1)
            idx = {h: headers_now.index(h) for h in headers_now if h in headers_now}
            sheet.update_cell(i, idx["DateRedeemed"] + 1, now)
            sheet.update_cell(i, idx["RedeemedBy"] + 1, staff_username or "Staff")
            discount = rec.get("Discount", DISCOUNT_LABEL)
            issued = rec.get("DateIssued", "")
            source = rec.get("Source", "")
            reply = (
                "‚úÖ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.\n\n"
                f"–ö–æ–¥: <b>{code}</b>\n"
                f"–°–∫–∏–¥–∫–∞: <b>{discount}</b>\n"
                f"–í—ã–¥–∞–Ω: {issued}\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
                f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: @{staff_username if staff_username else 'Staff'}"
            )
            return True, reply
    return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå"

def is_subscribed(user_id):
    try:
        m = bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return m.status in ("member", "administrator", "creator")
    except Exception:
        return False

WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –ø—Ä–æ–º–æ-–±–æ—Ç <b>SBALO</b>.\n\n"
    "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {channel}\n"
    "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
    "–¢–∞–∫–∂–µ —Å–Ω–∏–∑—É –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏: ¬´–û –±—Ä–µ–Ω–¥–µ¬ª –∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª."
)

BRAND_ABOUT = (
    "<b>SBALO</b> ‚Äî –±—Ä–µ–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Ä–∏—Ç –≤—ã—Å—à—É—é –º–µ—Ä—É —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –æ–±—É–≤–∏ –∏ –æ–±—Ä–∞–∑–∞.\n"
    "–ú—ã –¥–µ–ª–∞–µ–º –º–æ–¥–Ω—É—é –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –æ–±—É–≤—å –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏.\n\n"
    "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ—Å–∞–¥–∫–∞ ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
    "‚Ä¢ –°—Ç–∏–ª–∏ ‚Äî –æ—Ç casual –¥–æ –≤–µ—á–µ—Ä–Ω–∏—Ö\n"
    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —É—Ö–æ–¥ ‚Äî –ø—Ä—è–º–æ –∏–∑ –±–æ—Ç–∞\n\n"
    f"–ù–æ–≤–æ—Å—Ç–∏ –∏ —Ä–µ–ª–∏–∑—ã: {CHANNEL_USERNAME}"
)

def do_check_subscription(chat_id, user):
    if not is_subscribed(user.id):
        bot.send_message(
            chat_id,
            f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_USERNAME}, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=inline_subscribe_keyboard()
        )
        return
    if not can_issue(user.id):
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.")
        return
    src = USER_SOURCE.get(user.id, "subscribe")
    code, _ = issue_code(user.id, user.username, source=src)
    bot.send_message(
        chat_id,
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {CHANNEL_USERNAME}! üéâ\n–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>",
        parse_mode="HTML"
    )

# ---------- Handlers ----------
@bot.message_handler(commands=["start", "help"])
def start(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1 and parts[1].strip():
        USER_SOURCE[message.from_user.id] = parts[1].strip()[:32].lower()

    bot.send_message(
        message.chat.id,
        WELCOME.format(channel=CHANNEL_USERNAME),
        reply_markup=make_main_keyboard(message.from_user.id)
    )
    bot.send_message(
        message.chat.id,
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=inline_subscribe_keyboard()
    )

@bot.callback_query_handler(func=lambda c: c.data == "check_sub")
def check_sub(cb):
    do_check_subscription(cb.message.chat.id, cb.from_user)
    try:
        bot.answer_callback_query(cb.id)
    except Exception:
        pass

# --- –û –±—Ä–µ–Ω–¥–µ ---
@bot.message_handler(func=lambda m: m.text == BTN_ABOUT)
def handle_about(message):
    bot.reply_to(message, BRAND_ABOUT, parse_mode="HTML")

# --- –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤: —Ä–µ–π—Ç–∏–Ω–≥ -> —Ç–µ–∫—Å—Ç -> —Ñ–æ—Ç–æ -> –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
@bot.message_handler(func=lambda m: m.text == BTN_FEEDBACK)
def handle_feedback_start(message):
    uid = message.from_user.id
    FEEDBACK_DRAFT[uid] = {"rating": None, "text": None, "photos": []}  # –Ω–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
    STATE[uid] = "await_feedback_rating"
    bot.reply_to(
        message,
        "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –ø–æ –ø—è—Ç–∏–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ (1 ‚Äì –ø–ª–æ—Ö–æ, 5 ‚Äì –æ—Ç–ª–∏—á–Ω–æ).",
        reply_markup=rating_keyboard()
    )

@bot.message_handler(func=lambda m: m.text in RATING_BTNS)
def handle_feedback_rating(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_feedback_rating":
        return
    try:
        rating = int((message.text or "").split()[-1])
    except Exception:
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (1‚Äì5).", reply_markup=rating_keyboard())
        return
    FEEDBACK_DRAFT.setdefault(uid, {"rating": None, "text": None, "photos": []})
    FEEDBACK_DRAFT[uid]["rating"] = rating
    STATE[uid] = "await_feedback_text"
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    bot.reply_to(
        message,
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=kb
    )

@bot.message_handler(func=lambda m: m.text == BTN_CANCEL)
def handle_cancel(message):
    uid = message.from_user.id
    STATE.pop(uid, None)
    FEEDBACK_DRAFT.pop(uid, None)
    bot.reply_to(message, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=make_main_keyboard(uid))

@bot.message_handler(content_types=["text"])
def handle_text_general(message):
    uid = message.from_user.id
    state = STATE.get(uid)

    # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
    if state == "await_feedback_text":
        text = (message.text or "").strip()
        if not text:
            bot.reply_to(message, "–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
            return
        FEEDBACK_DRAFT.setdefault(uid, {"rating": None, "text": None, "photos": []})
        FEEDBACK_DRAFT[uid]["text"] = text
        STATE[uid] = "await_feedback_photos"
        bot.reply_to(
            message,
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å 1‚Äì5 —Ñ–æ—Ç–æ (–ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –∞–ª—å–±–æ–º–æ–º). "
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª, –ª–∏–±–æ ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª.",
            reply_markup=photos_keyboard()
        )
        return

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –±–µ–∑ —Ñ–æ—Ç–æ/—Å —Ñ–æ—Ç–æ
    if state == "await_feedback_photos" and message.text in (BTN_SEND_FEEDBACK, BTN_SKIP_PHOTOS):
        draft = FEEDBACK_DRAFT.get(uid, {})
        rating = draft.get("rating")
        text = draft.get("text")
        photos: List[str] = draft.get("photos", [])
        if rating is None or not text:
            bot.reply_to(message, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: ¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª.")
            STATE.pop(uid, None)
            FEEDBACK_DRAFT.pop(uid, None)
            return
        feedback_ws.append_row([
            str(uid),
            message.from_user.username or "",
            str(rating),
            text,
            ",".join(photos) if photos else "",
            datetime.now().isoformat(sep=" ", timespec="seconds")
        ])
        STATE.pop(uid, None)
        FEEDBACK_DRAFT.pop(uid, None)
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ", reply_markup=make_main_keyboard(uid))
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∞–¥–º–∏–Ω)
    if state == "await_staff_id":
        new_id = None
        if hasattr(message, "forward_from") and message.forward_from:
            new_id = message.forward_from.id
        else:
            txt = (message.text or "").strip()
            if txt.isdigit():
                new_id = int(txt)

        if not new_id:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        STAFF_IDS.add(new_id)
        os.environ["STAFF_IDS"] = ",".join(str(x) for x in sorted(STAFF_IDS))
        STATE.pop(uid, None)
        bot.reply_to(message, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {new_id} ‚úÖ", reply_markup=make_main_keyboard(uid))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞/–ø–æ–≥–∞—à–µ–Ω–∏–µ –∫–æ–¥–∞ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)
    if state == "await_code":
        code = (message.text or "").strip().upper()
        if len(code) != 4 or not all(ch in (string.ascii_uppercase + string.digits) for ch in code):
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 4 —Å–∏–º–≤–æ–ª–∞ A‚ÄìZ/0‚Äì9.")
            return
        ok, info = redeem_code(code, message.from_user.username or "Staff")
        STATE.pop(uid, None)
        bot.reply_to(message, info, parse_mode="HTML", reply_markup=make_main_keyboard(uid))
        return

    # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –æ–±—ã—á–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
    if message.text and message.text.startswith("/"):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É üëá", reply_markup=make_main_keyboard(uid))
    else:
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá", reply_markup=make_main_keyboard(uid))

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–∑—ã–≤–∞
@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_feedback_photos":
        return
    # –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    if not message.photo:
        return
    file_id = message.photo[-1].file_id
    FEEDBACK_DRAFT.setdefault(uid, {"rating": None, "text": None, "photos": []})
    photos: List[str] = FEEDBACK_DRAFT[uid]["photos"]
    if len(photos) >= 5:
        bot.reply_to(message, "–ú–æ–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –∏–ª–∏ ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª.",
                     reply_markup=photos_keyboard())
        return
    photos.append(file_id)
    bot.reply_to(message, f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/5). –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.",
                 reply_markup=photos_keyboard())

# –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞/–∞–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda m: m.text == BTN_STAFF_VERIFY)
def handle_staff_verify(message):
    if STAFF_IDS and message.from_user.id not in STAFF_IDS:
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return
    STATE[message.from_user.id] = "await_code"
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø–æ–≥–∞—à–µ–Ω–∏—è (4 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == BTN_ADMIN_ADD_STAFF)
def handle_admin_add_staff(message):
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    STATE[message.from_user.id] = "await_staff_id"
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    bot.reply_to(
        message,
        "–ü—Ä–∏—à–ª–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ü–∏—Ñ—Ä–∞–º–∏) –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –õ–∏–±–æ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=kb
    )

# ---------- FLASK (WEBHOOK) ----------
app = Flask(__name__)
BASE_URL = os.getenv("BASE_URL") or f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME','')}".rstrip("/")
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"

@app.route("/", methods=["GET"])
def health():
    return "OK", 200

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook error:", e)
    return "OK", 200

if __name__ == "__main__":
    try:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL, allowed_updates=["message","callback_query"])
        print("Webhook set to:", WEBHOOK_URL)
    except Exception as e:
        print("Failed to set webhook:", e)

    port = int(os.getenv("PORT", "10000"))
    print("SBALO Promo Bot (Webhook) started on port", port)
    app.run(host="0.0.0.0", port=port)
