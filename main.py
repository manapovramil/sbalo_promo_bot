# -*- coding: utf-8 -*-
"""
SBALO Promo Bot ‚Äî Render (webhook —Å fallback –Ω–∞ polling)

–ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: ¬´–û –±—Ä–µ–Ω–¥–µ¬ª, ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª, –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ‚Äî ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥¬ª, ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª, ¬´–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞¬ª
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫/–æ—Ç–ø–∏—Å–æ–∫ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (–º–µ—Å—è—Ü/–≤—Å—ë –≤—Ä–µ–º—è)
- –ù–∞–¥—ë–∂–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ Google Sheets (lock + retries)
- –ü—Ä–æ–º–æ–∫–æ–¥ 1 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (upsert –≤ —Å—Ç—Ä–æ–∫—É)
- –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ—Å–ª–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
- –§–∏–∫—Å–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ /start-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ Source —Å—Ä–∞–∑—É –ø—Ä–∏ –∫–ª–∏–∫–µ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª
"""

import os, random, string, calendar, threading
from threading import Timer
from time import sleep
from datetime import datetime
from typing import Dict, Set, List, Tuple, Optional

import telebot
from flask import Flask, request

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: @sbalo_channel
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")

# STAFF_IDS ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–º–æ–≥—É—Ç –≥–∞—Å–∏—Ç—å –∫–æ–¥—ã, —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
STAFF_IDS: Set[int] = set(int(x) for x in os.getenv("STAFF_IDS", "").split(",") if x.strip().isdigit())

# ADMIN_IDS ‚Äî –∞–¥–º–∏–Ω—ã (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø, –≤–∫–ª—é—á–∞—è /subs_refresh)
ADMIN_IDS: List[int] = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()]

SUBSCRIPTION_MIN_DAYS = int(os.getenv("SUBSCRIPTION_MIN_DAYS", "0"))
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON", "").strip()
DISCOUNT_LABEL = os.getenv("DISCOUNT_LABEL", "5%")  # —Å–∫–∏–¥–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if not SERVICE_ACCOUNT_JSON:
    raise SystemExit("ENV SERVICE_ACCOUNT_JSON –ø—É—Å—Ç ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ credentials.json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

missing = [k for k, v in [("BOT_TOKEN", BOT_TOKEN),
                          ("CHANNEL_USERNAME", CHANNEL_USERNAME),
                          ("SPREADSHEET_ID", SPREADSHEET_ID)] if not v]
if missing:
    raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing))

# ---------- Google Sheets ----------
CREDENTIALS_PATH = "/tmp/credentials.json"
with open(CREDENTIALS_PATH, "w", encoding="utf-8") as f:
    f.write(SERVICE_ACCOUNT_JSON)

SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_PATH, SCOPES)
client = gspread.authorize(creds)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π lock –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π
GS_LOCK = threading.Lock()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
def _with_retries(fn, *args, retries=3, backoff=0.7, **kwargs):
    last_err = None
    for i in range(retries):
        try:
            return fn(*args, **kwargs)
        except Exception as e:
            last_err = e
            if i == retries - 1:
                raise
            sleep(backoff * (2 ** i))
    if last_err:
        raise last_err

def gs_append_row_safe(ws, row: list):
    with GS_LOCK:
        return _with_retries(ws.append_row, row)

def gs_update_cell_safe(ws, r: int, c: int, value: str):
    with GS_LOCK:
        return _with_retries(ws.update_cell, r, c, value)

def gs_get_all_records_safe(ws):
    with GS_LOCK:
        return _with_retries(ws.get_all_records)

def gs_find_safe(ws, query: str):
    with GS_LOCK:
        return _with_retries(ws.find, query)

def gs_row_values_safe(ws, row: int):
    with GS_LOCK:
        return _with_retries(ws.row_values, row)

def get_col_map(ws) -> dict:
    hdrs = gs_row_values_safe(ws, 1)
    return {h: i + 1 for i, h in enumerate(hdrs)}

def update_row_fields(ws, row_idx: int, fields: dict):
    colmap = get_col_map(ws)
    for k, v in fields.items():
        if k in colmap:
            gs_update_cell_safe(ws, row_idx, colmap[k], "" if v is None else str(v))

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç
sheet = client.open_by_key(SPREADSHEET_ID).sheet1
HEADERS = [
    "UserID","Username","PromoCode","DateIssued","DateRedeemed","RedeemedBy",
    "OrderID","Source","SubscribedSince","Discount","UnsubscribedAt",
    "SubscribeClickedAt","AutoIssuedAt"
]
headers = gs_row_values_safe(sheet, 1)
if not headers:
    gs_append_row_safe(sheet, HEADERS)
    headers = HEADERS[:]
else:
    for h in HEADERS:
        if h not in headers:
            gs_update_cell_safe(sheet, 1, len(headers) + 1, h)
            headers.append(h)

# –õ–∏—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
try:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).worksheet("Feedback")
except gspread.WorksheetNotFound:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).add_worksheet(title="Feedback", rows=2000, cols=6)
    gs_append_row_safe(feedback_ws, ["UserID","Username","Rating","Text","Photos","Date"])

# ---------- Telegram ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

STATE: Dict[int, str] = {}
USER_SOURCE: Dict[int, str] = {}   # —Ñ–∏–∫—Å–∏—Ä—É–µ–º utm/–∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ /start
FEEDBACK_DRAFT: Dict[int, Dict] = {}

# –î–ª—è –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–æ–∫ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª
PENDING_SUB: Dict[int, Dict] = {}

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
BTN_ABOUT = "‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ"
BTN_FEEDBACK = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
BTN_STAFF_VERIFY = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥"
BTN_ADMIN_ADD_STAFF = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"  # –≤–∏–¥–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∏ –∞–¥–º–∏–Ω–∞–º
BTN_STATS_MENU = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BTN_SKIP_PHOTOS = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
BTN_SEND_FEEDBACK = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
RATING_BTNS = ["‚≠ê 1","‚≠ê 2","‚≠ê 3","‚≠ê 4","‚≠ê 5"]

# ---------- –ü—Ä–∞–≤–∞ ----------
def is_admin(uid: int) -> bool:
    return uid in ADMIN_IDS

def is_staff(uid: int) -> bool:
    return uid in STAFF_IDS or is_admin(uid)

def add_staff_id(new_id: int) -> None:
    STAFF_IDS.add(new_id)
    os.environ["STAFF_IDS"] = ",".join(str(x) for x in sorted(STAFF_IDS))

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def make_main_keyboard(user_id: int):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_ABOUT), telebot.types.KeyboardButton(BTN_FEEDBACK))
    if is_staff(user_id):
        kb.add(telebot.types.KeyboardButton(BTN_STAFF_VERIFY))
        kb.add(telebot.types.KeyboardButton(BTN_STATS_MENU))
        kb.add(telebot.types.KeyboardButton(BTN_ADMIN_ADD_STAFF))
    return kb

def rating_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    kb.add(*[telebot.types.KeyboardButton(x) for x in RATING_BTNS])
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def photos_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_SEND_FEEDBACK), telebot.types.KeyboardButton(BTN_SKIP_PHOTOS))
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def inline_subscribe_keyboard():
    ikb = telebot.types.InlineKeyboardMarkup()
    ikb.add(telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="want_subscribe"))
    ikb.add(telebot.types.InlineKeyboardButton("üéÅ–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="check_and_issue"))
    return ikb

# ---------- –¢–µ–∫—Å—Ç—ã ----------
WELCOME = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>SBALO</b> üë†‚ú®\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —É–∑–Ω–∞–µ—à—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –±—Ä–µ–Ω–¥–∞ –∏ —Å–º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º.\n\n"
    "–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –±—É–¥—å –±–ª–∏–∂–µ –∫ –º–∏—Ä—É SBALO."
)

BRAND_ABOUT = (
    "<b>SBALO</b> –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–≤—ã—Å—à–∞—è –º–µ—Ä–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è¬ª ‚Äî –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –º—ã —Ö–æ—Ç–∏–º –¥–∞—Ä–∏—Ç—å –∫–∞–∂–¥–æ–º—É.\n\n"
    "–ú—ã —Å–æ–∑–¥–∞—ë–º –æ–±—É–≤—å –Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞—Ö –≤ –°—Ç–∞–º–±—É–ª–µ –∏ –ì—É–∞–Ω—á–∂–æ—É, –≥–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º–∏—Ä–æ–≤—ã–µ fashion-–±—Ä–µ–Ω–¥—ã.\n\n"
    "–í –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–æ –æ—Å–æ–±–∞—è —á–∞—Å—Ç—å –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏–∑ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫–æ–∂–∏ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. "
    "–û–Ω–∞ –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º: —á–µ—Ä–µ–∑ 1‚Äì2 –¥–Ω—è –Ω–æ—Å–∫–∏ –æ–±—É–≤—å –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å—Ç–æ–ø—É –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ —É–¥–æ–±–Ω–æ–π, –∫–∞–∫ –ª—é–±–∏–º—ã–µ —Ç–∞–ø–æ—á–∫–∏.\n\n"
    "SBALO ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ —Ç–≤–æ–π –∫–æ–º—Ñ–æ—Ä—Ç –≤ –∫–∞–∂–¥–æ–º —à–∞–≥–µ."
)

# ---------- Sheets —É—Ç–∏–ª–∏—Ç—ã ----------
def append_row_dict(ws, header_list: List[str], data: dict):
    headers_now = gs_row_values_safe(ws, 1)
    if not headers_now:
        gs_append_row_safe(ws, header_list)
        headers_now = header_list[:]
    row = [""] * len(headers_now)
    for k, v in data.items():
        if k in headers_now:
            row[headers_now.index(k)] = str(v)
    gs_append_row_safe(ws, row)

def get_row_by_user(user_id: int) -> Tuple[Optional[int], Optional[dict]]:
    records = gs_get_all_records_safe(sheet)
    for i, rec in enumerate(records, start=2):
        if str(rec.get("UserID")) == str(user_id):
            return i, rec
    return None, None

def find_user_code(user_id: int) -> Tuple[Optional[int], Optional[str]]:
    i, rec = get_row_by_user(user_id)
    if i and rec.get("PromoCode"):
        return i, rec["PromoCode"]
    return None, None

def ensure_column(name: str):
    hdrs = gs_row_values_safe(sheet, 1)
    if name not in hdrs:
        gs_update_cell_safe(sheet, 1, len(hdrs) + 1, name)

# ---------- –ü—Ä–æ–º–æ/–ø–æ–¥–ø–∏—Å–∫–∞ ----------
def generate_short_code() -> str:
    # 4 —Å–∏–º–≤–æ–ª–∞ A‚ÄìZ/0‚Äì9, –º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞ –±—É–∫–≤–∞
    alphabet = string.ascii_uppercase + string.digits
    while True:
        code = "".join(random.choices(alphabet, k=4))
        if any(ch.isalpha() for ch in code):
            return code

def ensure_subscribed_since(user_id: int) -> datetime:
    i, rec = get_row_by_user(user_id)
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    ensure_column("SubscribedSince")
    if i and rec.get("SubscribedSince"):
        try:
            return datetime.fromisoformat(rec["SubscribedSince"])
        except Exception:
            pass
    if i:
        col = gs_row_values_safe(sheet, 1).index("SubscribedSince") + 1
        gs_update_cell_safe(sheet, i, col, now)
    else:
        append_row_dict(sheet, HEADERS, {
            "UserID": str(user_id),
            "Source": "subscribe_check",
            "SubscribedSince": now
        })
    return datetime.fromisoformat(now)

def can_issue(user_id: int) -> bool:
    if SUBSCRIPTION_MIN_DAYS <= 0:
        return True
    since = ensure_subscribed_since(user_id)
    return (datetime.now() - since).days >= SUBSCRIPTION_MIN_DAYS

def issue_code(user_id: int, username: str, source: str = "subscribe") -> Tuple[str, bool]:
    """
    UPsert: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º 1 –∫–æ–¥ –∏ 1 —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ï—Å–ª–∏ –∫–æ–¥ —É–∂–µ –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ (created=False).
    - –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.
    - –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –ø–æ–ª—è–º–∏ PromoCode/DateIssued/Discount.
      Source –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—É—Å—Ç (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞—Ç—å UTM –∏–∑ /start).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (code, created_bool)
    """
    row_idx, rec = get_row_by_user(user_id)
    if row_idx and rec and rec.get("PromoCode"):
        return rec["PromoCode"], False

    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    code = generate_short_code()

    if row_idx:
        fields = {
            "Username": username or rec.get("Username") or "",
            "PromoCode": code,
            "DateIssued": now,
            "Discount": DISCOUNT_LABEL,
        }
        if not rec.get("Source"):
            fields["Source"] = source
        if source == "auto_issue" and not rec.get("AutoIssuedAt"):
            fields["AutoIssuedAt"] = now
        update_row_fields(sheet, row_idx, fields)
    else:
        append_row_dict(sheet, HEADERS, {
            "UserID": str(user_id),
            "Username": username or "",
            "PromoCode": code,
            "DateIssued": now,
            "DateRedeemed": "",
            "RedeemedBy": "",
            "Source": source,
            "SubscribedSince": "",
            "Discount": DISCOUNT_LABEL,
            "AutoIssuedAt": now if source == "auto_issue" else "",
        })

    # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ user_id (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç append/update)
    row_idx2, rec2 = get_row_by_user(user_id)
    if not row_idx2 or not rec2 or not rec2.get("PromoCode"):
        raise RuntimeError("Code not persisted for user")

    return rec2["PromoCode"], True

def redeem_code(code: str, staff_username: str) -> Tuple[bool, str]:
    try:
        cell = gs_find_safe(sheet, code)
    except Exception:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå"

    if not cell:
        return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå"

    row_idx = cell.row
    headers_now = gs_row_values_safe(sheet, 1)
    recs = gs_get_all_records_safe(sheet)
    rec = recs[row_idx - 2] if row_idx >= 2 and (row_idx - 2) < len(recs) else {}

    if rec.get("DateRedeemed"):
        return False, (
            "‚ùå –ö–æ–¥ —É–∂–µ –ø–æ–≥–∞—à–µ–Ω —Ä–∞–Ω–µ–µ.\n"
            f"–°–∫–∏–¥–∫–∞: {rec.get('Discount', '')}\n"
            f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {rec.get('DateIssued', '')}\n"
            f"–î–∞—Ç–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: {rec.get('DateRedeemed', '')}\n"
            f"–ü–æ–≥–∞—Å–∏–ª: {rec.get('RedeemedBy', '')}\n"
        )

    idx = {h: headers_now.index(h) for h in headers_now if h in headers_now}
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    gs_update_cell_safe(sheet, row_idx, idx["DateRedeemed"] + 1, now)
    gs_update_cell_safe(sheet, row_idx, idx["RedeemedBy"] + 1, staff_username or "Staff")

    discount = rec.get("Discount", DISCOUNT_LABEL)
    issued = rec.get("DateIssued", "")
    source = rec.get("Source", "")

    reply = (
        "‚úÖ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.\n\n"
        f"–ö–æ–¥: <b>{code}</b>\n"
        f"–°–∫–∏–¥–∫–∞: <b>{discount}</b>\n"
        f"–í—ã–¥–∞–Ω: {issued}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: @{staff_username if staff_username else 'Staff'}"
    )
    return True, reply

def is_subscribed(user_id: int) -> bool:
    try:
        m = bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return m.status in ("member", "administrator", "creator")
    except Exception:
        return False

# ---------- –õ–æ–≥–∏–∫–∞ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–µ–π –∫–æ–¥–∞ ----------
def mark_subscribe_click(user_id: int, username: str):
    ensure_column("SubscribeClickedAt")
    now = datetime.now().isoformat(sep=" ", timespec="seconds")
    src = USER_SOURCE.get(user_id, "direct")

    i, rec = get_row_by_user(user_id)
    if i:
        hdrs = gs_row_values_safe(sheet, 1)
        col = hdrs.index("SubscribeClickedAt") + 1
        gs_update_cell_safe(sheet, i, col, now)
        if not rec.get("Source"):  # –Ω–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞–µ–º —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            col_src = hdrs.index("Source") + 1
            gs_update_cell_safe(sheet, i, col_src, src)
    else:
        append_row_dict(sheet, HEADERS, {
            "UserID": str(user_id),
            "Username": username or "",
            "Source": src,
            "SubscribeClickedAt": now
        })

def schedule_membership_checks(user_id: int, chat_id: int):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞: 20s, 2min, 10min.
    –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:
      - SubscribedSince (–µ—Å–ª–∏ –ø—É—Å—Ç–æ)
      - issue_code(..., source="auto_issue") ‚Äî –∞–ø–¥–µ–π—Ç –≤ —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É
      - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º
    """
    delays = [20, 120, 600]
    PENDING_SUB[user_id] = {"chat_id": chat_id, "t0": datetime.now()}

    def _check():
        _, rec = get_row_by_user(user_id)
        if rec and rec.get("PromoCode"):
            PENDING_SUB.pop(user_id, None)
            return

        if is_subscribed(user_id):
            ensure_subscribed_since(user_id)
            try:
                issue_code(user_id, "", source="auto_issue")
            except Exception as e:
                for admin_id in ADMIN_IDS:
                    try: bot.send_message(admin_id, f"‚ö†Ô∏è Auto-issue fail –¥–ª—è {user_id}: {e}")
                    except: pass
            PENDING_SUB.pop(user_id, None)

    for d in delays:
        Timer(d, _check).start()

# ---------- –°—Ç–∞—Ä—Ç/–∫–Ω–æ–ø–∫–∏ ----------
@bot.message_handler(commands=["start", "help"])
def start(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1 and parts[1].strip():
        USER_SOURCE[message.from_user.id] = parts[1].strip()[:32].lower()
    bot.send_message(message.chat.id, WELCOME, reply_markup=make_main_keyboard(message.from_user.id))
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø—Ä–æ–º–æ–∫–æ–¥? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=inline_subscribe_keyboard())

@bot.callback_query_handler(func=lambda c: c.data == "check_and_issue")
def cb_check_and_issue(cb):
    do_check_subscription(cb.message.chat.id, cb.from_user)
    try:
        bot.answer_callback_query(cb.id)
    except Exception:
        pass

@bot.callback_query_handler(func=lambda c: c.data == "want_subscribe")
def cb_want_subscribe(cb):
    u = cb.from_user
    chat_id = cb.message.chat.id

    if u.id not in USER_SOURCE:
        USER_SOURCE[u.id] = "direct"

    try:
        mark_subscribe_click(u.id, u.username or "")
    except Exception as e:
        print("mark_subscribe_click error:", e)

    try:
        bot.send_message(
            chat_id,
            f"–û—Ç–∫—Ä–æ–π –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–ø–∏—à–∏—Å—å: https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
        )
    except Exception:
        pass

    try:
        schedule_membership_checks(u.id, chat_id)
    except Exception as e:
        print("schedule_membership_checks error:", e)

    try:
        bot.answer_callback_query(cb.id)
    except Exception:
        pass

def do_check_subscription(chat_id: int, user):
    if not is_subscribed(user.id):
        bot.send_message(
            chat_id,
            f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_USERNAME}, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=inline_subscribe_keyboard()
        )
        return
    if not can_issue(user.id):
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.")
        return

    src = USER_SOURCE.get(user.id, "subscribe")
    try:
        code, _ = issue_code(user.id, user.username, source=src)
        bot.send_message(
            chat_id,
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {CHANNEL_USERNAME}! üéâ\n–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        alert = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è user {user.id} (@{user.username}). –û—à–∏–±–∫–∞: {e}"
        for admin_id in ADMIN_IDS:
            try: bot.send_message(admin_id, alert)
            except Exception: pass
        bot.send_message(chat_id, "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ üôè")

@bot.message_handler(func=lambda m: m.text == BTN_ABOUT)
def handle_about(message):
    bot.reply_to(message, BRAND_ABOUT, parse_mode="HTML")

# ---------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
def parse_iso(dt_str: str) -> Optional[datetime]:
    if not dt_str:
        return None
    try:
        return datetime.fromisoformat(dt_str)
    except Exception:
        return None

def month_bounds(year: int, month: int) -> Tuple[datetime, datetime]:
    start = datetime(year, month, 1)
    last_day = calendar.monthrange(year, month)[1]
    end = datetime(year, month, last_day, 23, 59, 59)
    return start, end

def get_subscribe_date(rec: dict) -> Optional[datetime]:
    return parse_iso(rec.get("SubscribedSince") or rec.get("DateIssued") or "")

def ensure_unsubscribed_col():
    ensure_column("UnsubscribedAt")

def refresh_unsubs(max_checks: Optional[int] = None) -> Tuple[int, int]:
    """–ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç UnsubscribedAt —Ç–µ–º, –∫—Ç–æ –≤—ã—à–µ–ª –∏–∑ –∫–∞–Ω–∞–ª–∞. –ö–æ–º–∞–Ω–¥–∞ /subs_refresh (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    ensure_unsubscribed_col()
    hdrs = gs_row_values_safe(sheet, 1)
    idx = {h: hdrs.index(h) for h in hdrs}
    updated = 0
    checked = 0
    records = gs_get_all_records_safe(sheet)
    for i, rec in enumerate(records, start=2):
        if max_checks is not None and checked >= max_checks:
            break
        uid = rec.get("UserID")
        if not uid:
            continue
        uid = int(str(uid))
        if rec.get("UnsubscribedAt"):
            continue
        if not get_subscribe_date(rec):
            continue
        checked += 1
        try:
            m = bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=uid)
            if m.status in ("left", "kicked"):
                now = datetime.now().isoformat(sep=" ", timespec="seconds")
                gs_update_cell_safe(sheet, i, idx["UnsubscribedAt"] + 1, now)
                updated += 1
        except Exception:
            pass
    return checked, updated

def aggregate_by_source(period: Optional[Tuple[datetime, datetime]] = None) -> Tuple[Dict[str, int], Dict[str, int]]:
    subs: Dict[str, int] = {}
    unsubs: Dict[str, int] = {}
    records = gs_get_all_records_safe(sheet)
    for rec in records:
        src = (rec.get("Source") or "default").strip() or "default"
        sub_dt = get_subscribe_date(rec)
        if sub_dt and (period is None or (period[0] <= sub_dt <= period[1])):
            subs[src] = subs.get(src, 0) + 1
        unsub_dt = parse_iso(rec.get("UnsubscribedAt") or "")
        if unsub_dt and (period is None or (period[0] <= unsub_dt <= period[1])):
            unsubs[src] = unsubs.get(src, 0) + 1
    return subs, unsubs

def format_stats_by_source(title: str, subs: Dict[str, int], unsubs: Dict[str, int]) -> str:
    all_sources = sorted(set(list(subs.keys()) + list(unsubs.keys())))
    total_sub = sum(subs.get(s, 0) for s in all_sources)
    total_unsub = sum(unsubs.get(s, 0) for s in all_sources)
    lines = [f"üìä {title}"]
    if not all_sources:
        lines.append("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return "\n".join(lines)
    for s in all_sources:
        a = subs.get(s, 0)
        b = unsubs.get(s, 0)
        lines.append(f"{s:10s} ‚Äî –ø–æ–¥–ø–∏—Å–∫–∏: {a} / –æ—Ç–ø–∏—Å–∫–∏: {b} / –ø—Ä–∏—Ä–æ—Å—Ç: {a - b:+d}")
    lines.append("")
    lines.append(f"–ò—Ç–æ–≥–æ: –ø–æ–¥–ø–∏—Å–∫–∏ {total_sub}, –æ—Ç–ø–∏—Å–∫–∏ {total_unsub}, –ø—Ä–∏—Ä–æ—Å—Ç {total_sub - total_unsub:+d}")
    return "\n".join(lines)

# ---------- –ò–Ω–ª–∞–π–Ω-–º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ----------
CB_SUBS_MENU_CUR = "subs_menu_cur"
CB_SUBS_MENU_PREV = "subs_menu_prev"
CB_SUBS_MENU_ALL = "subs_menu_all"
CB_SUBS_MENU_PICK = "subs_menu_pick"

def send_subs_menu(chat_id: int):
    kb = telebot.types.InlineKeyboardMarkup()
    kb.add(
        telebot.types.InlineKeyboardButton("üóì –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data=CB_SUBS_MENU_CUR),
        telebot.types.InlineKeyboardButton("‚èÆ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data=CB_SUBS_MENU_PREV),
    )
    kb.add(
        telebot.types.InlineKeyboardButton("üìÜ –í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü", callback_data=CB_SUBS_MENU_PICK),
        telebot.types.InlineKeyboardButton("‚àû –í—Å—ë –≤—Ä–µ–º—è", callback_data=CB_SUBS_MENU_ALL),
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)

# ---------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–º–µ–Ω—é/–∫–æ–º–∞–Ω–¥—ã) ----------
@bot.message_handler(func=lambda m: m.text == BTN_STATS_MENU)
def handle_stats_menu_button(message):
    if not is_staff(message.from_user.id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return
    send_subs_menu(message.chat.id)

@bot.message_handler(commands=["subs_all"])
def cmd_subs_all(message):
    if not is_staff(message.from_user.id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return
    subs, unsubs = aggregate_by_source(period=None)
    text = format_stats_by_source("–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚Äî –≤—Å–µ –≤—Ä–µ–º—è", subs, unsubs)
    bot.reply_to(message, text)

@bot.message_handler(commands=["subs_month"])
def cmd_subs_month(message):
    if not is_staff(message.from_user.id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return
    parts = message.text.split(maxsplit=1)
    now = datetime.now()
    if len(parts) > 1:
        arg = parts[1].strip()
        try:
            y, m = arg.split("-")
            year, month = int(y), int(m)
        except Exception:
            bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /subs_month YYYY-MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, /subs_month 2025-08)")
            return
    else:
        year, month = now.year, now.month
    start_dt, end_dt = month_bounds(year, month)
    subs, unsubs = aggregate_by_source(period=(start_dt, end_dt))
    text = format_stats_by_source(f"–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚Äî {year}-{str(month).zfill(2)}", subs, unsubs)
    bot.reply_to(message, text)

@bot.message_handler(commands=["subs_refresh"])
def cmd_subs_refresh(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    max_checks = None
    checked, updated = refresh_unsubs(max_checks=max_checks)
    bot.reply_to(message, f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ UnsubscribedAt: {updated}")

@bot.callback_query_handler(func=lambda c: c.data in {CB_SUBS_MENU_CUR, CB_SUBS_MENU_PREV, CB_SUBS_MENU_ALL, CB_SUBS_MENU_PICK})
def cb_subs_menu(cb):
    uid = cb.from_user.id
    if not is_staff(uid):
        try: bot.answer_callback_query(cb.id, "–¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        except Exception: pass
        return

    now = datetime.now()
    if cb.data == CB_SUBS_MENU_CUR:
        start_dt, end_dt = month_bounds(now.year, now.month)
        subs, unsubs = aggregate_by_source(period=(start_dt, end_dt))
        text = format_stats_by_source(f"–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚Äî {now.year}-{str(now.month).zfill(2)}", subs, unsubs)
        bot.send_message(cb.message.chat.id, text)
    elif cb.data == CB_SUBS_MENU_PREV:
        prev_month = now.month - 1 or 12
        prev_year = now.year if now.month > 1 else now.year - 1
        start_dt, end_dt = month_bounds(prev_year, prev_month)
        subs, unsubs = aggregate_by_source(period=(start_dt, end_dt))
        text = format_stats_by_source(f"–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚Äî {prev_year}-{str(prev_month).zfill(2)}", subs, unsubs)
        bot.send_message(cb.message.chat.id, text)
    elif cb.data == CB_SUBS_MENU_ALL:
        subs, unsubs = aggregate_by_source(period=None)
        text = format_stats_by_source("–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚Äî –≤—Å–µ –≤—Ä–µ–º—è", subs, unsubs)
        bot.send_message(cb.message.chat.id, text)
    elif cb.data == CB_SUBS_MENU_PICK:
        STATE[uid] = "await_month_pick"
        bot.send_message(cb.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>YYYY-MM</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>2025-08</code>.", parse_mode="HTML")
    try:
        bot.answer_callback_query(cb.id)
    except Exception:
        pass

# ---------- –ü–µ—Ä—Å–æ–Ω–∞–ª / –ê–¥–º–∏–Ω ----------
@bot.message_handler(func=lambda m: m.text == BTN_STAFF_VERIFY)
def handle_staff_verify(message):
    if not is_staff(message.from_user.id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return
    STATE[message.from_user.id] = "await_code"
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø–æ–≥–∞—à–µ–Ω–∏—è (4 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == BTN_ADMIN_ADD_STAFF)
def handle_admin_add_staff(message):
    if not is_staff(message.from_user.id):
        bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.")
        return
    STATE[message.from_user.id] = "await_staff_id"
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    bot.reply_to(
        message,
        "–ü—Ä–∏—à–ª–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ü–∏—Ñ—Ä–∞–º–∏), –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç. –õ–∏–±–æ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=kb
    )

@bot.message_handler(content_types=["contact"])
def handle_contact(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_staff_id":
        return
    contact = message.contact
    if contact and getattr(contact, "user_id", None):
        add_staff_id(int(contact.user_id))
        STATE.pop(uid, None)
        bot.reply_to(message, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {contact.user_id} ‚úÖ", reply_markup=make_main_keyboard(uid))
    else:
        bot.reply_to(message, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user_id Telegram. –ü—Ä–∏—à–ª–∏—Ç–µ ID —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# ---------- –û—Ç–∑—ã–≤—ã ----------
@bot.message_handler(func=lambda m: m.text == BTN_FEEDBACK)
def handle_feedback_start(message):
    uid = message.from_user.id
    FEEDBACK_DRAFT[uid] = {"rating": None, "text": None, "photos": []}
    STATE[uid] = "await_feedback_rating"
    bot.reply_to(message, "–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å –ø–æ –ø—è—Ç–∏–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ (1 ‚Äì –ø–ª–æ—Ö–æ, 5 ‚Äì –æ—Ç–ª–∏—á–Ω–æ).", reply_markup=rating_keyboard())

@bot.message_handler(func=lambda m: m.text in RATING_BTNS)
def handle_feedback_rating(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_feedback_rating":
        return
    rating = int((message.text or "").split()[-1])
    FEEDBACK_DRAFT[uid]["rating"] = rating
    STATE[uid] = "await_feedback_text"
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=kb)

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_feedback_photos":
        return
    file_id = message.photo[-1].file_id
    photos: List[str] = FEEDBACK_DRAFT[uid]["photos"]
    if len(photos) < 5:
        photos.append(file_id)
        bot.reply_to(message, f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/5).", reply_markup=photos_keyboard())
    else:
        bot.reply_to(message, "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ.", reply_markup=photos_keyboard())

@bot.message_handler(func=lambda m: m.text == BTN_SEND_FEEDBACK or m.text == BTN_SKIP_PHOTOS)
def handle_feedback_submit_buttons(message):
    uid = message.from_user.id
    if STATE.get(uid) != "await_feedback_photos":
        return
    draft = FEEDBACK_DRAFT.get(uid, {})
    gs_append_row_safe(feedback_ws, [
        str(uid),
        message.from_user.username or "",
        str(draft.get("rating")),
        draft.get("text"),
        ",".join(draft.get("photos", [])),
        datetime.now().isoformat(sep=" ", timespec="seconds")
    ])
    STATE.pop(uid, None)
    FEEDBACK_DRAFT.pop(uid, None)
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ", reply_markup=make_main_keyboard(uid))

@bot.message_handler(func=lambda m: m.text == BTN_CANCEL)
def handle_cancel(message):
    uid = message.from_user.id
    STATE.pop(uid, None)
    FEEDBACK_DRAFT.pop(uid, None)
    bot.reply_to(message, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=make_main_keyboard(uid))

# ---------- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–ï–ö–°–¢–ê ----------
@bot.message_handler(content_types=["text"])
def handle_text_general(message):
    uid = message.from_user.id
    state = STATE.get(uid)

    if state == "await_month_pick":
        txt = (message.text or "").strip()
        try:
            y, m = txt.split("-")
            year, month = int(y), int(m)
            STATE.pop(uid, None)
            start_dt, end_dt = month_bounds(year, month)
            subs, unsubs = aggregate_by_source(period=(start_dt, end_dt))
            text = format_stats_by_source(f"–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º ‚Äî {year}-{str(month).zfill(2)}", subs, unsubs)
            bot.reply_to(message, text)
            return
        except Exception:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∫–∞–∫ <b>YYYY-MM</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>2025-08</code>.", parse_mode="HTML")
            return

    if state == "await_feedback_text":
        text = (message.text or "").strip()
        FEEDBACK_DRAFT[uid]["text"] = text
        STATE[uid] = "await_feedback_photos"
        bot.reply_to(
            message,
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –∏–ª–∏ ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª.",
            reply_markup=photos_keyboard()
        )
        return

    if state == "await_feedback_photos":
        bot.reply_to(message, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª / ¬´‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª.", reply_markup=photos_keyboard())
        return

    if state == "await_staff_id":
        new_id = None
        if hasattr(message, "forward_from") and message.forward_from:
            new_id = message.forward_from.id
        else:
            txt = (message.text or "").strip()
            if txt.isdigit():
                new_id = int(txt)
        if not new_id:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.")
            return
        add_staff_id(int(new_id))
        STATE.pop(uid, None)
        bot.reply_to(message, f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {new_id} ‚úÖ", reply_markup=make_main_keyboard(uid))
        return

    if state == "await_code":
        code = (message.text or "").strip().upper()
        if len(code) != 4 or not all(ch in (string.ascii_uppercase + string.digits) for ch in code):
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 4 —Å–∏–º–≤–æ–ª–∞ A‚ÄìZ/0‚Äì9.")
            return
        ok, info = redeem_code(code, message.from_user.username or "Staff")
        STATE.pop(uid, None)
        bot.reply_to(message, info, parse_mode="HTML", reply_markup=make_main_keyboard(uid))
        return

    if message.text and message.text.startswith("/"):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É üëá", reply_markup=make_main_keyboard(uid))
    else:
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá", reply_markup=make_main_keyboard(uid))

# ---------- FLASK (WEBHOOK/POLLING) ----------
app = Flask(__name__)

_ext = os.getenv("BASE_URL", "").strip()
if not _ext:
    host = os.getenv("RENDER_EXTERNAL_HOSTNAME", "").strip()
    if host:
        _ext = f"https://{host}"
BASE_URL = _ext
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}" if BASE_URL else ""

@app.route("/", methods=["GET"])
def health():
    return "OK", 200

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook error:", e)
    return "OK", 200

def run_with_webhook():
    try:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL, allowed_updates=["message","callback_query"])
        print("Webhook set to:", WEBHOOK_URL)
        port = int(os.getenv("PORT", "10000"))
        print("SBALO Promo Bot (Webhook) started on port", port)
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        print("Failed to set webhook, switching to polling:", e)
        run_with_polling()

def run_with_polling():
    print("Starting bot in long polling mode...")
    try:
        bot.remove_webhook()
    except Exception:
        pass
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)

if __name__ == "__main__":
    if WEBHOOK_URL:
        run_with_webhook()
    else:
        print("BASE_URL is empty; falling back to polling.")
        run_with_polling()
