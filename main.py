# -*- coding: utf-8 -*-
"""
SBALO Promo Bot ‚Äî Render-–≤–µ—Ä—Å–∏—è
"""

import os, random, string
from datetime import datetime
from typing import Dict, Set, List

import telebot
from flask import Flask, request

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- ENV ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
STAFF_IDS: Set[int] = set(int(x) for x in os.getenv("STAFF_IDS", "").split(",") if x.strip().isdigit())
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
SUBSCRIPTION_MIN_DAYS = int(os.getenv("SUBSCRIPTION_MIN_DAYS", "0"))
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON", "").strip()
DISCOUNT_LABEL = os.getenv("DISCOUNT_LABEL", "7%")

if not SERVICE_ACCOUNT_JSON:
    raise SystemExit("ENV SERVICE_ACCOUNT_JSON –ø—É—Å—Ç ‚Äî –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ credentials.json –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
missing = [k for k, v in [("BOT_TOKEN", BOT_TOKEN),
                          ("CHANNEL_USERNAME", CHANNEL_USERNAME),
                          ("SPREADSHEET_ID", SPREADSHEET_ID)] if not v]
if missing:
    raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: " + ", ".join(missing))

# ---------- Google Sheets ----------
CREDENTIALS_PATH = "/tmp/credentials.json"
with open(CREDENTIALS_PATH, "w", encoding="utf-8") as f:
    f.write(SERVICE_ACCOUNT_JSON)

SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_PATH, SCOPES)
client = gspread.authorize(creds)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç
sheet = client.open_by_key(SPREADSHEET_ID).sheet1
HEADERS = ["UserID","Username","PromoCode","DateIssued","DateRedeemed","RedeemedBy","OrderID","Source","SubscribedSince","Discount"]
headers = sheet.row_values(1)
if not headers:
    sheet.append_row(HEADERS)
    headers = HEADERS[:]
else:
    for h in HEADERS:
        if h not in headers:
            sheet.update_cell(1, len(headers) + 1, h)
            headers.append(h)

# –õ–∏—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
try:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).worksheet("Feedback")
except gspread.WorksheetNotFound:
    feedback_ws = client.open_by_key(SPREADSHEET_ID).add_worksheet(title="Feedback", rows=2000, cols=6)
    feedback_ws.append_row(["UserID","Username","Rating","Text","Photos","Date"])

# ---------- Telegram ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

STATE: Dict[int, str] = {}
USER_SOURCE: Dict[int, str] = {}
FEEDBACK_DRAFT: Dict[int, Dict] = {}

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
BTN_ABOUT = "‚ÑπÔ∏è –û –±—Ä–µ–Ω–¥–µ"
BTN_FEEDBACK = "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
BTN_STAFF_VERIFY = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/–ü–æ–≥–∞—Å–∏—Ç—å –∫–æ–¥"
BTN_ADMIN_ADD_STAFF = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BTN_SKIP_PHOTOS = "‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ"
BTN_SEND_FEEDBACK = "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"
RATING_BTNS = ["‚≠ê 1","‚≠ê 2","‚≠ê 3","‚≠ê 4","‚≠ê 5"]

# ---------- –ü—Ä–∞–≤–∞ ----------
def is_admin(uid: int) -> bool:
    return bool(ADMIN_ID) and uid == ADMIN_ID

def is_staff(uid: int) -> bool:
    return uid in STAFF_IDS or is_admin(uid)

def add_staff_id(new_id: int) -> None:
    STAFF_IDS.add(new_id)
    os.environ["STAFF_IDS"] = ",".join(str(x) for x in sorted(STAFF_IDS))

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def make_main_keyboard(user_id: int):
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_ABOUT), telebot.types.KeyboardButton(BTN_FEEDBACK))
    if is_staff(user_id):
        kb.add(telebot.types.KeyboardButton(BTN_STAFF_VERIFY))
    if is_admin(user_id):
        kb.add(telebot.types.KeyboardButton(BTN_ADMIN_ADD_STAFF))
    return kb

def rating_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5)
    kb.add(*[telebot.types.KeyboardButton(x) for x in RATING_BTNS])
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def photos_keyboard():
    kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(telebot.types.KeyboardButton(BTN_SEND_FEEDBACK), telebot.types.KeyboardButton(BTN_SKIP_PHOTOS))
    kb.add(telebot.types.KeyboardButton(BTN_CANCEL))
    return kb

def inline_subscribe_keyboard():
    ikb = telebot.types.InlineKeyboardMarkup()
    ikb.add(telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
    ikb.add(telebot.types.InlineKeyboardButton("üéÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="check_and_issue"))
    return ikb

# ---------- –¢–µ–∫—Å—Ç—ã ----------
WELCOME = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>SBALO</b> üë†‚ú®\n"
    "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —É–∑–Ω–∞–µ—à—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –±—Ä–µ–Ω–¥–∞ –∏ —Å–º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º.\n\n"
    "–í—ã–±–∏—Ä–∞–π –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É –∏ –±—É–¥—å –±–ª–∏–∂–µ –∫ –º–∏—Ä—É SBALO."
)

BRAND_ABOUT = (
    "<b>SBALO</b> –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–≥–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´–≤—ã—Å—à–∞—è –º–µ—Ä–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è¬ª ‚Äî –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –º—ã —Ö–æ—Ç–∏–º –¥–∞—Ä–∏—Ç—å –∫–∞–∂–¥–æ–º—É.\n\n"
    "–ú—ã —Å–æ–∑–¥–∞—ë–º –æ–±—É–≤—å –Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞—Ö –≤ –°—Ç–∞–º–±—É–ª–µ –∏ –ì—É–∞–Ω—á–∂–æ—É, –≥–¥–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –º–∏—Ä–æ–≤—ã–µ fashion-–±—Ä–µ–Ω–¥—ã.\n\n"
    "–í –Ω–∞—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –Ω–æ –æ—Å–æ–±–∞—è —á–∞—Å—Ç—å –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏–∑ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫–æ–∂–∏ –≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. "
    "–û–Ω–∞ –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º: —á–µ—Ä–µ–∑ 1‚Äì2 –¥–Ω—è –Ω–æ—Å–∫–∏ –æ–±—É–≤—å –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Å—Ç–æ–ø—É –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ —É–¥–æ–±–Ω–æ–π, –∫–∞–∫ –ª—é–±–∏–º—ã–µ —Ç–∞–ø–æ—á–∫–∏.\n\n"
    "SBALO ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Å—Ç–∏–ª—å –∏ —Ç–≤–æ–π –∫–æ–º—Ñ–æ—Ä—Ç –≤ –∫–∞–∂–¥–æ–º —à–∞–≥–µ."
)

# ---------- –ü—Ä–æ–º–æ/–ø–æ–¥–ø–∏—Å–∫–∞ ----------
def generate_short_code() -> str:
    alphabet = string.ascii_uppercase + string.digits
    while True:
        code = "".join(random.choices(alphabet, k=4))
        if any(ch.isalpha() for ch in code):
            return code

# ... (–≤–µ—Å—å –±–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π issue_code, redeem_code –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# ---------- FLASK (WEBHOOK/POLLING) ----------
app = Flask(__name__)

_ext = os.getenv("BASE_URL", "").strip()
if not _ext:
    host = os.getenv("RENDER_EXTERNAL_HOSTNAME", "").strip()
    if host:
        _ext = f"https://{host}"
BASE_URL = _ext
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}" if BASE_URL else ""

@app.route("/", methods=["GET"])
def health():
    return "OK", 200

@app.route(WEBHOOK_PATH, methods=["POST"])
def telegram_webhook():
    try:
        json_str = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("Webhook error:", e)
    return "OK", 200

def run_with_webhook():
    try:
        bot.remove_webhook()
        bot.set_webhook(url=WEBHOOK_URL, allowed_updates=["message","callback_query"])
        print("Webhook set to:", WEBHOOK_URL)
        port = int(os.getenv("PORT", "10000"))
        app.run(host="0.0.0.0", port=port)
    except Exception as e:
        print("Failed to set webhook, switching to polling:", e)
        run_with_polling()

def run_with_polling():
    print("Starting bot in long polling mode...")
    try:
        bot.remove_webhook()
    except Exception:
        pass
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)

if __name__ == "__main__":
    if WEBHOOK_URL:
        run_with_webhook()
    else:
        print("BASE_URL is empty; falling back to polling.")
        run_with_polling()
